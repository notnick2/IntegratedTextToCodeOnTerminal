#!/bin/bash

source .env

agent() {
  if [ -z "$1" ]; then
    echo "Usage: agent <prompt>"
    return 1
  fi

  local prompt="$1"

  echo "$prompt"


response=$(curl https://api.openai.com/v1/chat/completions \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $OPENAI_API_KEY" \
  -d '{
  "model": "gpt-3.5-turbo",
  "messages": [
    {
      "role": "system",
      "content": "Return an array of sequential bash commands to achieve the functionality mentioned in the prompt.\narray format is commands separated by @#! nothing else only the commands separated by @#!no array names, parenthesis or anything. only return the array and nothing else. only the array should be returned no other texts or anything. when prompted to write code or any text into a file echo the text into the file make sure you echo the line breaks correctly without causing any error for bash to add text or code into the file , No matter how long the code or text is, always give the bash command to echo the complete text and file no matter the token limit or word limit, its important for you to give all the commands required to satisfy the given prompt no matter the token limit or word limit."
    },
    {
      "role": "user",
      "content": "'"$prompt"'"
    }
  ],
  "temperature": 1,
  "max_tokens": 256,
  "top_p": 1,
  "frequency_penalty": 0,
  "presence_penalty": 0
}')

# Print the response
echo "$response"

content=$(echo "$response" | jq -r '.choices[0].message.content')

echo "here"
echo "$content"
echo "here"



# Convert the string into an array
IFS=$'@#!' read -r -a commands <<< "$content"

echo "$commands"

# Iterate over the array
for command in "${commands[@]}"; do
    echo "$command"
    eval "$commands"
done

#conten=$(echo "$response" | jq -r '.choices[0].message.content | type')
#echo "$conten"


# commands=$(echo "$response" | jq -r '.choices[0].message.content | join(";")')

#echo "$commands"
 # echo -e "Executing commands. Please wait..\n"

 #echo "$commands"




#IFS=';' read -ra command_array <<< "$commands"

#for command in "${command_array[@]}"; do
#    echo "Executing: $command"
  #  eval "$command"
#     done


#  echo -e "\nCommands executed successfully."


}


agent "$1"
